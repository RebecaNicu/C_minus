/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, ID, ELSE, IF, INT, RETURN, VOID, WHILE, DEVIDED_BY, LESS, LESS_OR_EQUAL, GREATER, GREATER_OR_EQUAL, EQUALS, ASSIGNMENT, NOT_EQUAL, COMMA, LSQPAR, RSQPAR, LCURLBRACE, RCURLBRACE, DIGIT;
terminal Integer    NUM;        // our scanner provides numbers as integers

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal program;
non terminal declaration_list;
non terminal declaration;
non terminal var_declaration;
non terminal fun_declaration;
non terminal type_specifier;
non terminal params;
non terminal param_list;
non terminal compound_stmt;
non terminal param; 

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */

/*program ::= declaration_list {: System.out.println("Program"); :}
         ;
         
declaration_list ::= declaration_list declaration {: System.out.println("Declaration List"); :}
                 | declaration
                 ; 
                 
declaration ::= var_declaration {: System.out.println("Declaration"); :}
             | fun_declaration
             ;
                 
var_declaration ::= type_specifier ID SEMI {: System.out.println("Var Declaration"); :}
                | type_specifier ID LSQPAR NUM RSQPAR SEMI
                ;

type_specifier ::= INT {: System.out.println("Type Specifier"); :}
               | VOID
               ;

fun_declaration ::= type_specifier ID LPAREN params RPAREN compound_stmt {: System.out.println("Fun Declaration"); :}
                ;

params ::= param_list {: System.out.println("Params"); :}
        | VOID
        ;

param_list ::= param_list COMMA param {: System.out.println("Param List"); :}
            | param
            ;*/
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | NUM:n	                     {: RESULT = n;           :}
             ;
  